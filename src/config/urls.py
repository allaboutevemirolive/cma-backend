# src/config/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings  # To access settings variables (like DEBUG)
from django.conf.urls.static import static  # To serve media files in development

# --- drf-yasg (Swagger/OpenAPI) ---
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

# --- Simple JWT (Token Authentication) ---
from rest_framework_simplejwt.views import (
    TokenObtainPairView,  # View to get access/refresh tokens
    TokenRefreshView,  # View to refresh access token
)

# --- Schema View Configuration (for drf-yasg) ---
# Defines the metadata for the OpenAPI specification generated by drf-yasg.
schema_view = get_schema_view(
    openapi.Info(
        title="Course Management API (MVP)",  # Updated title for MVP
        default_version="v1",
        description=(
            "API for MVP course management: Users, Courses, Enrollments. "
            "Provides endpoints for registration, login, course creation/management (role-based), "
            "course enrollment/unenrollment, and basic admin user management."
        ),  # Updated description for MVP
        # terms_of_service="https://www.example.com/policies/terms/",
        contact=openapi.Contact(email="api-support@example.com"),
        license=openapi.License(name="BSD 3-Clause License"),
    ),
    public=True,  # Allows schema view access without authentication
    permission_classes=(
        permissions.AllowAny,
    ),  # Permissions required to access the schema endpoint itself
)


# --- URL Patterns ---
# The main list of URL routes for the entire project.
urlpatterns = [
    # 1. Django Admin Site
    path("admin/", admin.site.urls),
    # 2. API Endpoints (Grouped under /api/)
    path(
        "api/",
        include(
            [
                # Include URLs from the 'courses' app (e.g., /api/courses/)
                path("", include("apps.courses.urls")),
                # Include URLs from the 'enrollments' app (e.g., /api/enrollments/)
                path("", include("apps.enrollments.urls")),
                # Include URLs from the 'users' app
                # This should contain registration (/api/register/) and
                # admin user management (/api/admin/users/)
                path("", include("apps.users.urls")),
                # --- JWT Authentication Endpoints ---
                # POST to '/api/token/' with username/password to get JWT tokens (Login).
                path("token/", TokenObtainPairView.as_view(), name="token_obtain_pair"),
                # POST to '/api/token/refresh/' with a valid refresh token to get a new access token.
                path(
                    "token/refresh/", TokenRefreshView.as_view(), name="token_refresh"
                ),
                # --- Optional: Current User Endpoint ---
                # GET to '/api/users/me/' to get details of the logged-in user.
                # path("users/me/", CurrentUserView.as_view(), name="current-user"),
            ]
        ),
    ),
    # 3. API Documentation Endpoints (drf-yasg) - Placed outside /api/ prefix
    # Serves the OpenAPI schema in JSON or YAML format.
    path(
        "swagger<format>/", schema_view.without_ui(cache_timeout=0), name="schema-json"
    ),  # format can be .json or .yaml
    # Serves the interactive Swagger UI documentation browser.
    path(
        "swagger/",
        schema_view.with_ui("swagger", cache_timeout=0),
        name="schema-swagger-ui",
    ),
    # Serves the alternative ReDoc documentation browser.
    path("redoc/", schema_view.with_ui("redoc", cache_timeout=0), name="schema-redoc"),
]


# --- Media File Serving (Development Only) ---
# This pattern is added ONLY when DEBUG is True.
# It tells Django's development server how to serve user-uploaded files (MEDIA_ROOT)
# when requested via their MEDIA_URL prefix.
# WARNING: This is insecure and inefficient for production. In production, your
# web server (e.g., Nginx, Apache) should be configured to serve media files directly.
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    # Optional: Add static file serving if needed (usually handled by runserver automatically)
    # urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

# --- Debug Toolbar (Optional - Add only if installed and DEBUG=True) ---
# if settings.DEBUG:
#     try:
#         import debug_toolbar
#         urlpatterns = [
#             path('__debug__/', include(debug_toolbar.urls)),
#         ] + urlpatterns
#     except ImportError:
#         pass
